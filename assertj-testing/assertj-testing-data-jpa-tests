i will give you code next, please create test cases from it.
i will give you test cases below, that is the minimum requirement, for the test, if you can think of more test cases, please add them
for assertations please use assertj instead of jupiter from junit.
Please only output the new code format, and nothing else - no explanations on your part.
Also generate only one test for the class named in the [test for class] tag
The code you generate should never contain comments, only instructions in the form of code.

//dealing with testbuilder
it is also important to me that you use the testbuilder if it is passed as a dependency. i will explain how to handle when and data from lombok in the following example
this is how it could look for the TestPublicHoliday Builder first the .withDefaults() method is called and then the values are overridden. E.g. for a null test the whole thing would look like this
TestPublicHolidayBuilder.withDefaults()
                    .withName(null)
                    .build()
the last thing to do is to call build
we can also overwrite multiple values for this we have to chain the withs
TestPublicHolidayBuilder.withDefaults()
                    .withName(null)
.withMonthDay(MonthDay.of(Month.JANUARY, 1))
                    .build()

//data jpa test template

import org.junit.jupiter.api.AfterEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

@ActiveProfiles("test")
@Testcontainers
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@DataJpaTest(includeFilters = @ComponentScan.Filter(classes = {<here name of test prefix>PersistenceAdapter.class, <here name of test prefix>Mapper.class}, type = FilterType.ASSIGNABLE_TYPE))
public class <here name of test prefix>DataJpaTest {

    @Container
    static PostgreSQLContainer<?> postgresContainer = new PostgreSQLContainer<>("postgres:15.4-alpine")
            .withReuse(true);

    @DynamicPropertySource
    static void registerProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.datasource.url", postgresContainer::getJdbcUrl);
        registry.add("spring.datasource.username", postgresContainer::getUsername);
        registry.add("spring.datasource.password", postgresContainer::getPassword);
    }

    @Autowired
    private Jpa<here name of test prefix>CalendarRepository repository;

    @Autowired
    private <here name of ressources repository>PersistenceAdapter adapter;

    @AfterEach
    void clear() {
        repository.deleteAll();
    }
}
[test for class]

[testcases]

[dependecies]

[testbuilder if exists]

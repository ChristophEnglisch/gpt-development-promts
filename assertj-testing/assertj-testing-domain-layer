i will give you code next, please create test cases from it.
i will give you test cases below, that is the minimum requirement, for the test, if you can think of more test cases, please add them
for assertations please use assertj instead of jupiter from junit.
Please only output the new code format, and nothing else - no explanations on your part.
Also generate only one test for the class named in the [test for class] tag
The code you generate should never contain comments, only instructions in the form of code.

//dealing with testbuilder
it is also important to me that you use the testbuilder if it is passed as a dependency. i will explain how to handle when and data from lombok in the following example
this is how it could look for the TestPublicHoliday Builder first the .withDefaults() method is called and then the values are overridden. E.g. for a null test the whole thing would look like this
TestPublicHolidayBuilder.withDefaults()
                    .withName(null)
                    .build()
the last thing to do is to call build
we can also overwrite multiple values for this we have to chain the withs
TestPublicHolidayBuilder.withDefaults()
                    .withName(null)
.withMonthDay(MonthDay.of(Month.JANUARY, 1))
                    .build()

[test for class]

[testcases]

[dependecies]
@AggregateRoot
@Getter
@EqualsAndHashCode(callSuper = false)
public class ReportEmployee extends Entity {
  private EmployeeId id;
  private FirstName firstName;
  private LastName lastName;
  private FederalState regularPlaceOfWork;
  private WeeklyHoursOfWork weeklyHoursOfWork;
  private WorkingDays workingDays;

  public ReportEmployee(
    FirstName firstName,
    LastName lastName,
    FederalState regularPlaceOfWork,
    WeeklyHoursOfWork weeklyHoursOfWork,
    WorkingDays workingDays
  ) {
    setFirstName(firstName);
    setLastName(lastName);
    setRegularPlaceOfWork(regularPlaceOfWork);
    setWeeklyHoursOfWork(weeklyHoursOfWork);
    setWorkingDays(workingDays);
  }

  public ReportEmployee(
    EmployeeId id,
    FirstName firstName,
    LastName lastName,
    FederalState regularPlaceOfWork,
    WeeklyHoursOfWork weeklyHoursOfWork,
    WorkingDays workingDays
  ) {
    setId(id);
    setFirstName(firstName);
    setLastName(lastName);
    setRegularPlaceOfWork(regularPlaceOfWork);
    setWeeklyHoursOfWork(weeklyHoursOfWork);
    setWorkingDays(workingDays);
  }

  public ReportEmployee setId(EmployeeId id) {
    if (id == null) {
      throw new IllegalArgumentException("EmployeeId cannot be null");
    }
    EmployeeId oldId = this.id;
    this.id = id;
    if (oldId == null) {
      domainEvents.add(
        ReportEmployeeCreated.of(this));
    }
    return this;
  }

  private void setFirstName(FirstName firstName) {
    if (firstName == null) {
      throw new IllegalArgumentException("FirstName cannot be null");
    }
    this.firstName = firstName;
  }

  private void setLastName(LastName lastName) {
    if (lastName == null) {
      throw new IllegalArgumentException("LastName cannot be null");
    }
    this.lastName = lastName;
  }

  private void setRegularPlaceOfWork(FederalState regularPlaceOfWork) {
    if (regularPlaceOfWork == null) {
      throw new IllegalArgumentException("FederalState cannot be null");
    }
    this.regularPlaceOfWork = regularPlaceOfWork;
  }

  private void setWeeklyHoursOfWork(WeeklyHoursOfWork weeklyHoursOfWork) {
    if (weeklyHoursOfWork == null) {
      throw new IllegalArgumentException("WeeklyHoursOfWork cannot be null");
    }
    this.weeklyHoursOfWork = weeklyHoursOfWork;
  }

  private void setWorkingDays(WorkingDays workingDays) {
    if (workingDays == null) {
      throw new IllegalArgumentException("WorkingDays cannot be null");
    }
    this.workingDays = workingDays;
  }
}


[testbuilder if exists]